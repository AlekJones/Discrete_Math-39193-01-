{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlekJones/Discrete_Math-39193-01-/blob/main/CPSMA_3913_Spring_2023_Online.alejjon.Module_2_RelationsAndFunctions\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YCJaepmmfKrS"
      },
      "source": [
        "# Project Part # : CPSMA 3133 [Dr. Jacob's](https://github.com/nurfnick) Discrete Mathematics \n",
        "\n",
        "## Project Name\n",
        "\n",
        "### Student's Name and ID\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xs_Pvtua1Nnt"
      },
      "source": [
        "## 1 Function (and Graph)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2z6U1aB_fQDM"
      },
      "source": [
        "Today we will be breaking down the most simple of functions! The basic pumpkin spice latte if you will."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rU_BgC_kfH7g"
      },
      "source": [
        "import math\n",
        "import numpy as np\n",
        "\n",
        "def sif(x):\n",
        "  return ((6*x)^2)+(2*(3-1))\n",
        "\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iggon6VK1Vxo"
      },
      "source": [
        "For the above I simply imported \"math\" and the numpy module!\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sif(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttFQr6QBTbKr",
        "outputId": "5897484a-ce17-4411-c301-5ac0ffb214ce"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Made sure that the code was inputted correctly and tested with a variable"
      ],
      "metadata": {
        "id": "0D0dgZ1xTgIV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as graphPlot\n",
        "\n",
        "x = np.arange(-4,4)\n",
        "graphPlot.plot(x,sif(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "13E2XpFITm3d",
        "outputId": "32cafbb6-a8ae-43cb-bb0f-4427052891f2"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fb69e7e1820>]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that is a beautiful graph if I say so myself!"
      ],
      "metadata": {
        "id": "zrTc4Z3UUMZ_"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_7RoPTU_hXG1"
      },
      "source": [
        "## Dictionaries\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the Dictionary section I'm going to examine a cohesion of good and bad Marvel characters from my perspective."
      ],
      "metadata": {
        "id": "6Oshw1QnVT2u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "good = ['Iron Man', 'Captain America', 'Fantastic Four', 'Black Widow', 'Hawkeye', 'SpiderMan']\n",
        "bad = ['Thanos', 'Ultron', 'Dr. Doom', 'Red Skull', 'Kang', 'Mysterio']\n",
        "\n",
        "dictionary = dict({good:bad for good,bad in zip(good, bad)})"
      ],
      "metadata": {
        "id": "bC2p8HPAYLFg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5U5T3Fld5X0S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9b61083-f6f4-4b4c-a9e8-13c66910345f"
      },
      "source": [
        "dictionary"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Iron Man': 'Thanos',\n",
              " 'Captain America': 'Ultron',\n",
              " 'Fantastic Four': 'Dr. Doom',\n",
              " 'Black Widow': 'Red Skull',\n",
              " 'Hawkeye': 'Kang',\n",
              " 'SpiderMan': 'Mysterio'}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "actualDictionary = dict({'Iron Man':'Thanos','Black Widow':'Red Skull', 'SpiderMan':'Mysterio'})"
      ],
      "metadata": {
        "id": "xfWtblNgZRpO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "thenewlist = [actualDictionary.get(x,x) for x in good]"
      ],
      "metadata": {
        "id": "4ZlV-HRAaBlw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "thenewlist"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0iPEUckQaPd0",
        "outputId": "0d9d0e6e-ba97-4581-dcbb-573874596fb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Thanos',\n",
              " 'Captain America',\n",
              " 'Fantastic Four',\n",
              " 'Red Skull',\n",
              " 'Hawkeye',\n",
              " 'Mysterio']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "With a little manipulation we were able to get our new list. "
      ],
      "metadata": {
        "id": "vvjmgAKLaXbt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Reflection"
      ],
      "metadata": {
        "id": "WRzyiM4Aa3kW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looking back at the information it feels informative and non-informative at the same time. \n",
        "\n",
        "Thinking about the Marvel universe as a whole you would think it would be symmetric as everyone has interacted with each other but the data doesn't correlate that.\n",
        "\n",
        "My function i believe is injective if I'm transcribing the information correctly.\n"
      ],
      "metadata": {
        "id": "RZ3ypSISa7Ji"
      }
    }
  ]
}